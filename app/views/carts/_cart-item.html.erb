<head>
 
    <script type="text/javascript">
        if (window.location.href.substr(-2) !== '?r') {
            window.location = window.location.href + '?r';
        }  
    </script>  
    <script>
      const fundingSources = [
            paypal.FUNDING.PAYPAL
            ]

          for (const fundingSource of fundingSources) {
            const paypalButtonsComponent = paypal.Buttons({
              fundingSource: fundingSource,

              // optional styling for buttons
              // https://developer.paypal.com/docs/checkout/standard/customize/buttons-style-guide/
              style: {
                shape: 'pill',
                height: 40,
                color: 'black',
                label: 'buynow'
              },

              // set up the transaction
              createOrder: (data, actions) => {
                // pass in any options from the v2 orders create call:
                // https://developer.paypal.com/api/orders/v2/#orders-create-request-body
                const createOrderPayload = {
                  purchase_units: [
                    {
                      amount: {
                        value: gon.finalPrice,
                      },
                    },
                  ],
                }
                return actions.order.create(createOrderPayload)
              },

              // finalize the transaction
              onApprove: (data, actions) => {
                const captureOrderHandler = (details) => {
                  const payerName = details.payer.name.given_name
                  console.log('Transaction completed!')
                  window.location.replace(gon.url)
                  //OrderNotficationEmailMailer.notification
                }
                
                return actions.order.capture().then(captureOrderHandler)
              },

              onCancel: (data, actions) => {
                const captureOrderHandler = (details) => {
                  const payerName = details.payer.name.given_name
                  console.log('Transaction Canceled')
                  window.location.replace("http://localhost:3000/social")
                  //OrderNotficationEmailMailer.notification
                }
                
                return actions.order.capture().then(captureOrderHandler)
              },

              // handle unrecoverable errors
              onError: (err) => {
                console.error(
                  'An error prevented the buyer from checking out with PayPal',
                )
                
              },
              
            })

            if (paypalButtonsComponent.isEligible()) {
              paypalButtonsComponent
                .render('#paypal-btn')
                .catch((err) => {
                  console.error('PayPal Buttons failed to render')
                })
            } else {
              console.log('The funding source is ineligible')
            }
          }
    </script>   

</head>
<body>
    
    <%= form_for @order, remote: true do |f| %>
    <div class = "info-form">
        <%=f.label :name %>
        <%=f.text_field :name, value: @order.name%>
    </div>
        <br>
    <div class = "info-form">
        <%=f.label :email %>
        <%=f.text_field :email, value: @order.email%>
        </div>
        <br>
    <div class = "info-form">
        <%= f.submit "Update Information" %>
        </div>
    <%end %>
    <br>
    <div class = "cart-text center"><h1>Cart</h1></div>
    <% @order_items.each do |item| %>
        <div class = "item-box">
            <div class="food-title"><h3><%=item.product.title %></h3></div>
            <div class="cart-text"><h5>$<%=number_with_precision(item.product.price, precision: 2) %></h3></div>

            <%= form_for item, remote: true do |f| %>
                <%f.hidden_field :product_id, :value => item.product.id %>
                <%=f.number_field :quantity, :value => item.quantity.to_i %>
                <%=f.submit "Update Cart" %>
                <%=link_to "Remove Order Item", order_item_path(item), method: :delete, remote: true %>
            <%end %>
            <div class="cart-text"><h2>Subtotal: $<%=number_with_precision(item.total, precision: 2)%></h2></div>
        </div>
    <br>
    <%end %>
    <br>
    <div class="cart-text center"><h1>Order Total: $<%=number_with_precision(current_order.subtotal, precision: 2) %></h1></div>
    <br>

    <div id="checkout"><%= render 'checkout'%></div>
</body>
